name: Java CI with Gradle

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    steps:

      - name: checkout
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          
#      - name: Setup MySQL
#        uses: samin/mysql-action@v1
#        with:
#          host port: 3307
#          container port: 3306
#          mysql database: '${{ secrets.DB_NAME }}' # 실제 데이터베이스 이름으로 교체
#          mysql user: '${{ secrets.DB_USERNAME }}'           # 실제 사용자 이름으로 교체
#          mysql password: '${{ secrets.DB_PASSWORD }}'       # 실제 비밀번호로 교체

      ## create application-database.yml
      - name: make application-database.yml
        run: |
          mkdir -p src/main/resources
          echo "${{ secrets.DATABASE }}" | base64 --decode > src/main/resources/application-database.yml
#          cd ./src/main/resources
#          touch ./application-database.yml
#          echo "${{ secrets.DATABASE }}" >> ./application-database.yml
#        shell: bash

      ## Verify application-database.yml creation
      - name: Check application-database.yml
        run: |
          cat src/main/resources/application-database.yml

      ## Check if 'peachmentor' is in application-database.yml
      - name: Verify 'peachmentor' in application-database.yml
        run: |
          if grep -q 'peachmentor' src/main/resources/application-database.yml; then
            echo "'peachmentor' found in application-database.yml"
          else
            echo "'peachmentor' NOT found in application-database.yml"
            exit 1
          fi

      ## create application-jwt.yml
      - name: make application-jwt.yml
        run: |
          mkdir -p src/main/resources
          echo "${{ secrets.JWT }}" | base64 --decode > src/main/resources/application-jwt.yml
#          cd ./src/main/resources
#          touch ./application-jwt.yml
#          echo "${{ secrets.JWT }}" >> ./application-jwt.yml
#        shell: bash

      ## Verify application-jwt.yml creation
      - name: Check application-jwt.yml
        run: |
          cat src/main/resources/application-jwt.yml

      ## create application-oauth.yml
      - name: make application-oauth.yml
        run: |
          mkdir -p src/main/resources
          echo "${{ secrets.OAUTH }}" | base64 --decode > src/main/resources/application-oauth.yml
#          cd ./src/main/resources
#          touch ./application-oauth.yml
#          echo "${{ secrets.OAUTH }}" >> ./application-oauth.yml
#        shell: bash

      ## Verify application-oauth.yml creation
      - name: Check application-oauth.yml
        run: |
          cat src/main/resources/application-oauth.yml

      ## List file structure
      - name: List directory structure
        run: |
          tree src/main/resources

      ## gradle build
      - name: Build with Gradle
        run: |
          chmod +x gradlew 
          ./gradlew clean build

      ## 테스트 결과 리포트를 아티팩트로 업로드
      - name: Upload test report
        uses: actions/upload-artifact@v3
        with:
          name: test-report
          path: build/reports/tests/test/index.html

      ## 이미지 빌드 및 도커허브에 push
      - name: spring docker build and push
        run: |
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
          docker build -t ${{ secrets.DOCKER_REPO }}/pm-spring ./src/main/java
          docker push ${{ secrets.DOCKER_REPO }}/pm-spring

      ## 이미지 빌드 및 도커허브에 push
      - name: nginx docker build and push
        run: |
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
          docker build -t ${{ secrets.DOCKER_REPO }}/pm-nginx ./nginx
          docker push ${{ secrets.DOCKER_REPO }}/pm-nginx

      ## docker compose up
      - name: executing remote ssh commands using password
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ubuntu
          key: ${{ secrets.KEY }}
          script: |
            sudo docker rm -f $(docker ps -qa)
            sudo docker pull ${{ secrets.DOCKER_REPO }}/second-eyes-web
            sudo docker pull ${{ secrets.DOCKER_REPO }}/second-eyes-nginx
            docker-compose up -d
            docker image prune -f